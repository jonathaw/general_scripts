#!/usr/bin/env python3.5
"""
script bundle to calculate protein conc. etc.
"""
import sys
import argparse
from collections import OrderedDict
import pandas as pd

from AASeq import AASeq


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-mode', default='csv', type=str)
    parser.add_argument('-in_file', type=str)
    parser.add_argument('-name', type=str)
    parser.add_argument('-seq', type=str)
    parser.add_argument('-dilution_factor', type=float)
    parser.add_argument('-absorbance', type=float)

    args = vars(parser.parse_args())

    if args['mode'] == 'csv':
        input_dict = parse_input_data(args['in_file'])

    elif args['mode'] == 'line':
        input_dict = {args['name']: {'name': args['name'],
                                     'seq': AASeq(args['seq'], args['name']),
                                     'dilution_factor': args['dilution_factor'],
                                     'absorbance': args['absorbance']
                                     }}

    elif args['mode'] == 'Js':
        j_data = J_data()
        input_dict = {args['name']: {'name': args['name'],
                                     'seq': AASeq(j_data[args['name']], args['name']),
                                     'dilution_factor': args['dilution_factor'],
                                     'absorbance': args['absorbance']
                                     }}
        
    elif args['mode'] == 'excel':
        absorbances = [0.496333333, 0.409333333, 0.25, 0.493, 0.362, 0.401333333, 0.069, 0.352333333, 0.646333333, 0.396333333, 0.333, 0.343333333, 0.465333333, 0.380666667]
        names = ['j829.A', 'j5711.A', 'j5517.A', 'j5106.A', 'j5093.A', 'j4286.A', 'j3622.A', 'j1647.A', 'j4398.A',
                 'j3983.A', 'j3626.A', 'j4518.A', 'j4653.A', '1ohz.A']
        j_data = J_data()
        input_dict = OrderedDict()
        for name, absorbance in zip(names, absorbances):
            input_dict[name] = {'name': name,
                                'seq': AASeq(j_data[name], name),
                                'dilution_factor': args['dilution_factor'],
                                'absorbance': absorbance
                                }

    else:
        print('no mode found')
        sys.exit()

    pd.set_option('display.float_format', '{:.2g}'.format)
    df = pd.DataFrame(columns=['name', 'seq', 'dilution_factor', 'absorbance', 'molecular_weight', 'pI',
                               'extinction_coefficient'])

    for k, v in input_dict.items():
        # calculate extinction coefficient
        v['extinction_coefficient'] = v['seq'].calc_extinction_coefficient(reduced=False)

        # calculate Isoelectroc point
        v['pI'] = v['seq'].calc_isoelectric_point()

        # calculate molar concentration
        v['conc'] = v['dilution_factor'] * v['absorbance'] / v['extinction_coefficient']

        # calcualte concentration if dilued by half
        v['glycerol_conc'] = v['conc'] / 2

        # calculate molecular weight
        v['molecular_weight'] = v['seq'].calc_molecular_weight()

        # calculate g/L
        v['g/l'] = v['conc'] / v['molecular_weight']

        print_evernote_format(v)

        v['seq'] = v['seq'].get_seq()
        df = df.append(v, ignore_index=True)
    print(df)

    # print conc row for excel
    print('conc row for excel')
    print('\t'.join('%.2f' % (a * 10**6) for a in df['conc'].values))


def print_evernote_format(entry: dict) -> None:
    print('%s MW %i, %iAA, £%i, OD %.3f %.2eµM' % (entry['name'], entry['molecular_weight'], len(entry['seq']),
                                                entry['extinction_coefficient'], entry['absorbance'],
                                                entry['glycerol_conc']))


def parse_input_data(in_file: str) -> OrderedDict:
    """
    :param in_file: input table. use the template
    :return: dict of the CSV
    """
    with open(in_file, 'r') as fin:
        cont = fin.read().split('\n')
    result = OrderedDict({})
    for l in cont:
        s = l.split(',')
        if s[0] == 'name' or len(s) < 4:
            continue
        result[s[0]] = {'name': s[0],
                        'seq': AASeq(s[1], name=s[0]),
                        'dilution_factor': float(s[2]),
                        'absorbance': float(s[3])}
    return result


def J_data() -> dict:
    d = {'j829.A':  'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIADCDFIFSYDPNVLEIIGIDPGDIIVDPNPTESFDTSIHPDEKRIYFLFSQSSGTGAYAITKDGVFAKIRATVKSSAPGYITFSSVGGFSDRDLVKQKVSFIDGGVNVGNAT',
         'j5711.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIATCQFVFSYDPNVLEIIGIDPGDIIVDPNPTRSFETAIRPDEKRIAFLFAQSSGTGAYAITKDGVFAKIRATVKSSAPGYITFSSVGTFADTDFVKQKVSFIDGGVNVGNAT',
         'j5517.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIASCDFKFKYDPNVLEIIGIDPGDIIVDPNPTKSFSTSIRPDRKLIQFIFAQSSGTGAYAITKDGVFAKIRATVKSSAPGYITFLAVGAFADSDLVEQKVSFIDGGVNVGNAT',
         'j5106.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIAHCDFKFKYDPNVLEIIGIDPGDIIVDPNPTESFDTSIHPDEKRIAFLFSQSSGTGAYAITKDGVFAKIRATVKSSAPGYITFLSVGGFGDSDLVEQKVSFIDGGVNVGNAT',
         'j5093.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIADCDFVFKYDPNVLEIIGIDPGDIIVDPNPTESFETSIHPDKKKIVFLFSQGSGTGAYAITKDGVFAKIRATVKSSAPGYITFLAVGGFSDNDLVDQKVSFIDGGVNVGNAT',
         'j4286.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIANCDFVFKYDPNVLEIIGIDPGDIIVDPNPTRSFETSIHPDDKIIIFVFAQDSGTGAYAITKDGVFAKIRATVKSSAPGYITFEAVGSFADRDMVEQKVSFIDGGVNVGNAT',
         'j3622.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIASCQFVFKYDPNVLEIIGIDPGDIIVDPNPTESFETAIRPDKKKIIFVFAQSSGTGAYAITKDGVFAKIRATVKSSAPGYITFLAVGSFTDRDLVKQKVSFIDGGVNVGNAT',
         'j1647.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGISNCDFVFKYDPNVLEIIGIDPGDIIVDPNPTKSFSTAIRPDKKRIVFLFGQSSGTGAYAITKDGVFAKIRATVKSSAPGYITFLAVGGFSDKDLVKQKVSFIDGGVNVGNAT',
         'j4398.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIATCDFVFKYDPNVLEIIGIDPGDIIVDPNPTKSFETAIHPDKKLIVFVFAENSGTGAYAITKDGVFAKIRATVKSSAPGYITFEAVGGFADRDMVKQKVSFIDGGVNVGNAT',
         'j3983.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIADCDFVFKYDPNVLEIIGIDPGDIIVDPNPTRSFETAIFPDEKRIAFLFSQDSGTGAYAITKDGVFAKIRATVKSSAPGYITFSAVGGFADRDFVEQKVSFIDGGVNVGNAT',
         'j3626.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIASCEFVFKYDPNVLEIIGIDPGDIIVDPNPTKSFDTAIHPDEKRIIFVFAQDSGTGAYAITKDGVFAKIRATVKSSAPGYITFLAVGSFSDRDLVEQKVSFIDGGVNVGNAT',
         'j4518.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIATCDFVFKYDPNVLEIIGIDPGDIIVDPNPTRSFETAIHPDDKIIIFVFAQDSGTGAYAITKDGVFAKIRATVKSSAPGYITFEAVGSFADRDMVEQKVSFIDGGVNVGNAT',
         'j4653.A': 'MLEGLNDIFEAQKIEWHEGSHHHHHHANENLYFQGTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIADCDFVFKYDPNVLEIIGIDPGDIIVDPNPTESFETAIYPDKKIIVFLFAQDSGTGAYAITKDGVFAKIRATVKSSAPGYITFEAVGGFSDRDFVKQKVSFIDGGVNVGNAT',
         '1ohz.A': 'MANTPVSGNLKVEFYNSNPSDTTNSINPQFKVTNTGSSAIDLSKLTLRYYYTVDGQKDQTFWCDHAAIIGSNGSYNGITSNVKGTFVKMSSSTNNADTYLEISFTGGTLEPGAHVQIQGRFAKNDWSNYTQSNDYSFKSASQFVEWDQVTAYLNGVLVWGKEPGGSVVPSTQPVTTPPATTKPPATTIPPSDDPNAGSDGVVVEIGKVTGSVGTTVEIPVYFRGVPSKGIANCDFVFRYDPNVLEIIGIDPGDIIVDPNPTKSFDTAIYPDRKIIVFLFAEDSGTGAYAITKDGVFAKIRATVKSSAPGYITFDEVGGFADNDLVEQKVSFIDGGVNVGNAT'}
    return d

if __name__ == '__main__':
    main()
